@model paradise.ViewModels.QuizEditVm
@using System.Linq
@using paradise.ViewModels

@{
    ViewBag.Title = "Sửa quiz";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayoutPage1.cshtml";
}
<link href="~/Content/custom-css/CreateView.css" rel="stylesheet" />

<style>
    .question-block {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: .5rem;
    }

    .question-text, .option-text {
        width: 100%;
        min-height: 70px;
        resize: vertical;
        padding: 8px 10px;
        font-size: 14px;
    }

    .option-item {
        display: flex;
        gap: 8px;
        align-items: flex-start;
        margin-bottom: 8px;
    }

        .option-item .letter {
            min-width: 32px;
            background: #e9ecef;
            border-radius: 4px;
            text-align: center;
            padding: 8px;
            font-weight: 600;
        }

    .question-type-note {
        font-size: .9rem;
        color: #6c757d;
    }
</style>

<div class="page-container">
    <h4 class="fw-bold m-0">Sửa quiz</h4>

    <div class="page-content">
        @using (Html.BeginForm("Edit", "AdminQuizs", FormMethod.Post, new { area = "Admin", id = "quizForm", novalidate = "novalidate", autocomplete = "off" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.id)
            @Html.ValidationSummary(true, "", new { @class = "text-danger mb-3" })

            <div class="form-card">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">Tiêu đề</label>
                        @Html.TextBoxFor(m => m.title, new { @class = "form-control", placeholder = "Nhập tiêu đề", required = "required" })
                        @Html.ValidationMessageFor(m => m.title, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Chủ đề</label>
                        @Html.DropDownListFor(
                            m => m.topic,
                            (IEnumerable<SelectListItem>)ViewBag.topicItems,
                            new { @class = "form-select", required = "required" }
                        )
                        @Html.ValidationMessageFor(m => m.topic, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Thời lượng (phút)</label>
                        @Html.TextBoxFor(m => m.time, "{0:0.#}", new { @class = "form-control", type = "number", step = "1", min = "0", id = "time" })
                        @Html.ValidationMessageFor(m => m.time, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-4">
                        <label class="form-label">Số câu</label>
                        @Html.TextBoxFor(m => m.quantity, new { @class = "form-control", type = "number", min = "0", id = "quantity", @readonly = "readonly" })
                    </div>

                    <div class="col-md-4 d-flex align-items-end">
                        <div class="form-check mt-1">
                            @Html.CheckBoxFor(m => m.is_infinity, new { @class = "form-check-input", id = "isInf" })
                            <label class="form-check-label" for="isInf">Không giới hạn thời gian</label>
                        </div>
                    </div>
                </div>

                <hr class="my-4" />

                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5 class="m-0">Câu hỏi</h5>
                    <button type="button" id="btnAddQuestion" class="btn btn-outline-dark btn-sm">+ Thêm câu hỏi</button>
                </div>

                <div id="questionsContainer" class="mt-2">
                    @for (int i = 0; i < (Model.Questions?.Count ?? 0); i++)
                    {
                        var q = Model.Questions[i];
                        var isEssay = (q.question_type ?? "multiple_choice").ToLower() == "essay";
                        var essayOpt = q.Options?.FirstOrDefault(); // dùng Options[0] cho đáp án tự luận
                        <div class="question-block p-3 mb-3" data-qindex="@i">
                            @Html.Hidden($"Questions[{i}].id", q.id)
                            @Html.Hidden($"Questions[{i}]._remove", "false", new { @class = "q-remove-flag" })

                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="fw-bold m-0">Câu hỏi @(i + 1)</h6>
                                <button type="button" class="btn btn-outline-danger btn-sm btn-remove-q">Xoá câu này</button>
                            </div>

                            <div class="row g-2 mb-2">
                                <div class="col-md-4">
                                    <label class="form-label">Loại câu hỏi</label>
                                    <select class="form-select q-type" name="Questions[@i].question_type">
                                        <option value="multiple_choice" @(isEssay ? "" : "selected")>Trắc nghiệm</option>
                                        <option value="essay" @(isEssay ? "selected" : "")>Tự luận</option>
                                    </select>
                                </div>
                                <div class="col d-flex align-items-end">
                                    <div class="question-type-note type-note" @(isEssay ? "" : "hidden")>
                                        Câu tự luận: có ô “đáp án tham chiếu”, hệ thống không tự chấm điểm.
                                    </div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Nội dung câu hỏi</label>
                                <textarea name="Questions[@i].question_text" class="form-control question-text" rows="2">@q.question_text</textarea>
                            </div>

                            <!-- ESSAY ANSWER (lưu vào Options[0].option_text) -->
                            <div class="mb-3 essay-wrap" style="@(isEssay ? "" : "display:none")">
                                @if (essayOpt != null && essayOpt.id.HasValue)
                                {
                                    @Html.Hidden($"Questions[{i}].Options[0].id", essayOpt.id)
                                }
                                else
                                {
                                    <input type="hidden" name="Questions[@i].Options[0].id" value="" />
                                }
                                @Html.Hidden($"Questions[{i}].Options[0]._remove", "false", new { @class = "o-remove-flag" })

                                <label class="form-label">Đáp án tham chiếu (tự luận)</label>
                                <textarea name="Questions[@i].Options[0].option_text"
                                          class="form-control essay-answer" rows="2"
                                          placeholder="Nhập đáp án tham chiếu">@((essayOpt?.option_text) ?? "")</textarea>
                                <div class="form-text">Lưu vào <code>quiz_options.option_text</code> (is_correct = 1).</div>
                            </div>

                            <!-- MULTIPLE CHOICE -->
                            <div class="mb-2 mc-wrap" style="@(isEssay ? "display:none" : "")">
                                <label class="form-label">Các đáp án</label>
                                <div class="option-list">
                                    @{
                                        // CHỈ render options khi KHÔNG phải tự luận
                                        var opts = (!isEssay && q.Options != null)
                                            ? q.Options.Cast<OptionVm>().ToList()
                                            : new List<OptionVm>();

                                        for (int j = 0; j < opts.Count; j++)
                                        {
                                            var o = opts[j];
                                            <div class="option-item">
                                                <span class="letter">@((char)('A' + j))</span>

                                                @Html.Hidden($"Questions[{i}].Options[{j}].id", o.id)
                                                @Html.Hidden($"Questions[{i}].Options[{j}]._remove", "false", new { @class = "o-remove-flag" })

                                                <textarea name="Questions[@i].Options[@j].option_text"
                                                          class="option-text" rows="1">@o.option_text</textarea>

                                                <input class="form-check-input mt-1"
                                                       type="radio"
                                                       name="Questions[@i].CorrectOption"
                                                       value="@j"
                                                       @((q.CorrectOption == j && !isEssay) ? "checked" : "") />

                                                <button type="button" class="btn btn-outline-danger btn-sm btn-remove-opt">Xoá</button>
                                            </div>
                                        }
                                    }
                                </div>

                                <div class="mt-2">
                                    <button type="button" class="btn btn-outline-secondary btn-sm btn-add-opt">+ Thêm đáp án</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="actions mt-4">
                    <a class="btn btn-secondary" href="@Url.Action("Index","AdminQuizs", new { area="Admin"})">Huỷ</a>
                    <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
                </div>
            </div>
        }
    </div>
</div>

@section scripts{
    <script>
        (function () {
            const chk = document.getElementById('isInf');
            const time = document.getElementById('time');
            const qty = document.getElementById('quantity');
            const box = document.getElementById('questionsContainer');
            const btnAddQ = document.getElementById('btnAddQuestion');
            const form = document.getElementById('quizForm');

            function toggleTime() {
                const inf = chk && chk.checked === true;
                if (time) {
                    time.disabled = inf;
                    if (inf) time.value = "";
                }
            }
            if (chk) { chk.addEventListener('change', toggleTime); toggleTime(); }

            function autoResize(el) { el.style.height = 'auto'; el.style.height = el.scrollHeight + 'px'; }

            function syncQuantity() {
                const n = box.querySelectorAll('.question-block:not([data-hidden="1"])').length;
                if (qty) qty.value = n;
            }

            // Ẩn/hiện theo loại; khi ẩn thì DISABLED + bỏ name để không post về server
            function syncTypeUI(qb) {
                const qi = qb.dataset.qindex;
                const sel = qb.querySelector('.q-type');
                const mcWrap = qb.querySelector('.mc-wrap');
                const essayWrap = qb.querySelector('.essay-wrap');
                const note = qb.querySelector('.type-note');
                const isEssay = (sel?.value || 'multiple_choice') === 'essay';

                if (isEssay) {
                    // Essay ON
                    if (essayWrap) {
                        essayWrap.style.display = '';
                        const ans = essayWrap.querySelector('.essay-answer');
                        if (ans) {
                            ans.disabled = false;
                            ans.required = true;
                            ans.setAttribute('name', `Questions[${qi}].Options[0].option_text`);
                        }
                    }
                    if (mcWrap) {
                        mcWrap.style.display = 'none';
                        mcWrap.querySelectorAll('.option-text').forEach(t => { t.required = false; t.disabled = true; t.removeAttribute('name'); });
                        mcWrap.querySelectorAll('input[type="radio"]').forEach(r => { r.required = false; r.checked = false; r.disabled = true; r.removeAttribute('name'); });
                    }
                    note && (note.hidden = false);
                } else {
                    // Multiple choice ON
                    if (mcWrap) {
                        mcWrap.style.display = '';

                        // Nếu chưa có đáp án, tự thêm 4 đáp án trống
                        const list = mcWrap.querySelector('.option-list');
                        let count = list.querySelectorAll('.option-item').length;
                        if (count < 2) {
                            for (let k = count; k < 4; k++) addOption(qb);
                        }

                        mcWrap.querySelectorAll('.option-text').forEach((t, oj) => {
                            t.disabled = false; t.required = true; t.setAttribute('name', `Questions[${qi}].Options[${oj}].option_text`);
                        });
                        mcWrap.querySelectorAll('input[type="radio"]').forEach((r, oj) => {
                            r.disabled = false; r.required = true; r.setAttribute('name', `Questions[${qi}].CorrectOption`); r.value = String(oj);
                        });
                        const first = mcWrap.querySelector('input[type="radio"]');
                        if (first && !mcWrap.querySelector('input[type="radio"]:checked')) first.checked = true;
                    }
                    if (essayWrap) {
                        essayWrap.style.display = 'none';
                        const ans = essayWrap.querySelector('.essay-answer');
                        if (ans) { ans.required = false; ans.disabled = true; ans.removeAttribute('name'); } // không post
                    }
                    note && (note.hidden = true);
                }
            }

            function reindexAll() {
                const qBlocks = box.querySelectorAll('.question-block');
                qBlocks.forEach((qb, qi) => {
                    qb.dataset.qindex = qi;
                    const title = qb.querySelector('.fw-bold');
                    if (title) title.textContent = 'Câu hỏi ' + (qi + 1);

                    let qId = qb.querySelector('input[name$=".id"]');
                    if (qId) qId.name = `Questions[${qi}].id`;

                    let qRemove = qb.querySelector('.q-remove-flag');
                    if (qRemove) qRemove.name = `Questions[${qi}]._remove`;

                    let qText = qb.querySelector('.question-text');
                    if (qText) qText.name = `Questions[${qi}].question_text`;

                    let qType = qb.querySelector('.q-type');
                    if (qType) qType.name = `Questions[${qi}].question_type`;

                    // Essay fields (Options[0])
                    const essayWrap = qb.querySelector('.essay-wrap');
                    if (essayWrap) {
                        const ans = essayWrap.querySelector('.essay-answer');
                        const id = essayWrap.querySelector('input[name$=".Options[0].id"]');
                        const rem = essayWrap.querySelector('.o-remove-flag');
                        if (ans) ans.name = `Questions[${qi}].Options[0].option_text`;
                        if (id) id.name = `Questions[${qi}].Options[0].id`;
                        if (rem) rem.name = `Questions[${qi}].Options[0]._remove`;
                    }

                    // Multiple choice options
                    const items = qb.querySelectorAll('.option-item');
                    items.forEach((opt, oj) => {
                        const letter = opt.querySelector('.letter');
                        if (letter) letter.textContent = String.fromCharCode(65 + oj);

                        let oId = opt.querySelector('input[name$=".id"]');
                        if (oId) oId.name = `Questions[${qi}].Options[${oj}].id`;

                        let oRemove = opt.querySelector('.o-remove-flag');
                        if (oRemove) oRemove.name = `Questions[${qi}].Options[${oj}]._remove`;

                        let oText = opt.querySelector('.option-text');
                        if (oText) oText.name = `Questions[${qi}].Options[${oj}].option_text`;

                        let radio = opt.querySelector('input[type="radio"]');
                        if (radio) { radio.name = `Questions[${qi}].CorrectOption`; radio.value = String(oj); }
                    });

                    // đảm bảo enable/disable đúng sau khi reindex
                    syncTypeUI(qb);
                });
                syncQuantity();
            }

            function addOption(qb) {
                const list = qb.querySelector('.option-list');
                const oj = list.querySelectorAll('.option-item').length;

                const wrap = document.createElement('div');
                wrap.className = 'option-item';
                wrap.innerHTML = `
                <span class="letter">A</span>
                <input type="hidden" class="o-remove-flag" name="" value="false" />
                <textarea class="option-text" rows="1" placeholder="Đáp án"></textarea>
                <input class="form-check-input mt-1" type="radio" name="" value="${oj}" />
                <button type="button" class="btn btn-outline-danger btn-sm btn-remove-opt">Xoá</button>
            `;
                list.appendChild(wrap);

                const area = wrap.querySelector('.option-text');
                area.addEventListener('input', () => autoResize(area)); autoResize(area);

                wrap.querySelector('.btn-remove-opt').addEventListener('click', () => {
                    const items = list.querySelectorAll('.option-item');
                    if (items.length <= 2) { alert('Cần ít nhất 2 đáp án.'); return; }
                    const idInput = wrap.querySelector('input[name$=".id"]');
                    if (idInput && idInput.value) {
                        wrap.querySelector('.o-remove-flag').value = 'true';
                        wrap.style.display = 'none';
                    } else {
                        wrap.remove();
                    }
                    reindexAll();
                });

                reindexAll();
            }

            function addQuestion() {
                const qi = box.querySelectorAll('.question-block').length;
                const qb = document.createElement('div');
                qb.className = 'question-block p-3 mb-3';
                qb.dataset.qindex = qi;

                qb.innerHTML = `
                <input type="hidden" name="Questions[${qi}].id" value="" />
                <input type="hidden" class="q-remove-flag" name="Questions[${qi}]._remove" value="false" />

                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="fw-bold m-0">Câu hỏi ${qi + 1}</h6>
                    <button type="button" class="btn btn-outline-danger btn-sm btn-remove-q">Xoá câu này</button>
                </div>

                <div class="row g-2 mb-2">
                    <div class="col-md-4">
                        <label class="form-label">Loại câu hỏi</label>
                        <select class="form-select q-type" name="Questions[${qi}].question_type">
                            <option value="multiple_choice" selected>Trắc nghiệm</option>
                            <option value="essay">Tự luận</option>
                        </select>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label">Nội dung câu hỏi</label>
                    <textarea name="Questions[${qi}].question_text" class="form-control question-text" rows="2" placeholder="Nhập nội dung câu hỏi"></textarea>
                </div>

                <!-- Essay answer -->
                <div class="mb-3 essay-wrap" style="display:none">
                    <input type="hidden" name="Questions[${qi}].Options[0].id" value="" />
                    <input type="hidden" class="o-remove-flag" name="Questions[${qi}].Options[0]._remove" value="false" />
                    <label class="form-label">Đáp án</label>
                    <textarea name="Questions[${qi}].Options[0].option_text" class="form-control essay-answer" rows="2" placeholder="Nhập đáp án"></textarea>
                </div>

                <!-- Multiple choice -->
                <div class="mb-2 mc-wrap">
                    <label class="form-label">Các đáp án</label>
                    <div class="option-list"></div>
                    <div class="mt-2">
                        <button type="button" class="btn btn-outline-secondary btn-sm btn-add-opt">+ Thêm đáp án</button>
                    </div>
                </div>
            `;

                box.appendChild(qb);

                // Mặc định 4 đáp án
                for (let j = 0; j < 4; j++) addOption(qb);
                const firstRadio = qb.querySelector('.option-list input[type="radio"]');
                if (firstRadio) firstRadio.checked = true;

                qb.querySelector('.btn-add-opt')?.addEventListener('click', () => addOption(qb));

                qb.querySelector('.btn-remove-q')?.addEventListener('click', () => {
                    const idInput = qb.querySelector('input[name$=".id"]');
                    if (idInput && idInput.value) {
                        qb.querySelector('.q-remove-flag').value = 'true';
                        qb.dataset.hidden = "1";
                        qb.style.display = 'none';
                    } else {
                        qb.remove();
                    }
                    reindexAll();
                });

                const qArea = qb.querySelector('.question-text');
                qArea.addEventListener('input', () => autoResize(qArea)); autoResize(qArea);

                const essayArea = qb.querySelector('.essay-answer');
                essayArea.addEventListener('input', () => autoResize(essayArea));

                qb.querySelector('.q-type').addEventListener('change', () => syncTypeUI(qb));
                syncTypeUI(qb);

                reindexAll();
            }

            // Bind cho các block sẵn có
            box.querySelectorAll('.question-block').forEach(qb => {
                qb.querySelectorAll('.option-text').forEach(t => { t.addEventListener('input', () => autoResize(t)); autoResize(t); });
                qb.querySelectorAll('.essay-answer').forEach(t => { t.addEventListener('input', () => autoResize(t)); autoResize(t); });
                const qArea = qb.querySelector('.question-text');
                qArea.addEventListener('input', () => autoResize(qArea)); autoResize(qArea);

                qb.querySelector('.btn-add-opt')?.addEventListener('click', () => addOption(qb));

                qb.querySelectorAll('.btn-remove-opt').forEach(btn => {
                    btn.addEventListener('click', (ev) => {
                        const item = ev.target.closest('.option-item');
                        const list = qb.querySelector('.option-list');
                        const items = list.querySelectorAll('.option-item');
                        if (items.length <= 2) { alert('Cần ít nhất 2 đáp án.'); return; }
                        const idInput = item.querySelector('input[name$=".id"]');
                        if (idInput && idInput.value) {
                            item.querySelector('.o-remove-flag').value = 'true';
                            item.style.display = 'none';
                        } else {
                            item.remove();
                        }
                        reindexAll();
                    });
                });

                qb.querySelector('.btn-remove-q')?.addEventListener('click', () => {
                    const idInput = qb.querySelector('input[name$=".id"]');
                    if (idInput && idInput.value) {
                        qb.querySelector('.q-remove-flag').value = 'true';
                        qb.dataset.hidden = "1";
                        qb.style.display = 'none';
                    } else {
                        qb.remove();
                    }
                    reindexAll();
                });

                qb.querySelector('.q-type')?.addEventListener('change', () => syncTypeUI(qb));
                syncTypeUI(qb);
            });

            if (btnAddQ) btnAddQ.addEventListener('click', addQuestion);

            // Trước khi submit: xóa name của field đang disabled để model binder bỏ qua hoàn toàn
            if (form) form.addEventListener('submit', () => {
                form.querySelectorAll('[disabled]').forEach(el => el.removeAttribute('name'));
            });

            syncQuantity();
        })();
    </script>
}
