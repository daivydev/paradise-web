@model paradise.Models.user

@{
    ViewBag.Title = "Chỉnh sửa tài khoản";
}

<div class="page-container">
    <h4 class="fw-bold m-0">Chỉnh sửa tài khoản</h4>

    <div class="page-content">
        @using (Html.BeginForm("Edit", "AdminUsers", FormMethod.Post, new { area = "Admin", id = "userForm", novalidate = "novalidate" }))
        {
            <div class="form-card row g-3">
                <!-- Email -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.email, "Email")
                    @Html.TextBoxFor(m => m.email, new { @class = "form-control", type = "email", placeholder = "you@gmail.com" })
                    @Html.ValidationMessageFor(m => m.email, "", new { @class = "text-danger" })
                </div>

                <!-- Password -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.password, "Mật khẩu mới")
                    @Html.PasswordFor(m => m.password, new { @class = "form-control", placeholder = "******" })
                    @Html.ValidationMessageFor(m => m.password, "", new { @class = "text-danger" })
                </div>

                <!-- First Name -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.user_profiles.first_name, "Tên")
                    @Html.TextBoxFor(m => m.user_profiles.first_name, new { @class = "form-control", placeholder = "Hieu" })
                    @Html.ValidationMessageFor(m => m.user_profiles.first_name, "", new { @class = "text-danger" })
                </div>

                <!-- Last Name -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.user_profiles.last_name, "Họ")
                    @Html.TextBoxFor(m => m.user_profiles.last_name, new { @class = "form-control", placeholder = "Hoang Van" })
                    @Html.ValidationMessageFor(m => m.user_profiles.last_name, "", new { @class = "text-danger" })
                </div>

                <!-- Phone -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.user_profiles.phone_number, "Số điện thoại")
                    @Html.TextBoxFor(m => m.user_profiles.phone_number, new { @class = "form-control", placeholder = "09x xxx xxxx" })
                    @Html.ValidationMessageFor(m => m.user_profiles.phone_number, "", new { @class = "text-danger" })
                </div>

                <!-- DOB -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.user_profiles.date_of_birth, "Ngày sinh (tháng/ngày/năm)")
                    @Html.TextBoxFor(m => m.user_profiles.date_of_birth, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                    @Html.ValidationMessageFor(m => m.user_profiles.date_of_birth, "", new { @class = "text-danger" })
                </div>

                <!-- Gender -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.user_profiles.gender, "Giới tính")
                    @Html.DropDownListFor(m => m.user_profiles.gender,
                        new SelectList(new[] {
                            new { Value = "", Text = "-- Chọn giới tính --" },
                            new { Value = "Male", Text = "Nam" },
                            new { Value = "Female", Text = "Nữ" },
                            new { Value = "Other", Text = "Khác" }
                        }, "Value", "Text", Model?.user_profiles?.gender),
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.user_profiles.gender, "", new { @class = "text-danger" })
                </div>

                <!-- Role -->
                <div class="col-md-6 form-group">
                    @Html.LabelFor(m => m.user_profiles.role_id, "Vai trò")
                    @Html.DropDownListFor(m => m.user_profiles.role_id,
                        (SelectList)ViewBag.Roles,
                        "-- Chọn vai trò --",
                        new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.user_profiles.role_id, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Actions -->
            <div class="actions">
                <a href="@Url.Action("Index", "AdminUsers", new { area = "Admin" })" class="btn-secondary">Hủy bỏ</a>
                @Html.AntiForgeryToken()
                <button type="submit" class="btn-primary">Xác nhận</button>
            </div>
        }
    </div>
</div>

<style>
    /* Page Layout */
    .page-container {
        margin: 0 auto;
        padding: 0 1rem;
    }

    .page-content {
        max-width: 900px;
        margin: 0 auto;
        margin-top: 60px;
    }

    /* Card */
    .form-card {
        border-radius: 1rem;
        padding: 2.5rem;
        background: #fff;
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.05);
        transition: all 0.3s ease-in-out;
    }

        .form-card:hover {
            box-shadow: 0 10px 32px rgba(0, 0, 0, 0.08);
        }

    /* Labels */
    .form-group label {
        font-weight: 500;
        font-size: 0.9rem;
        color: #374151;
        margin-bottom: 0.4rem;
        display: block;
    }

    /* Inputs & Selects */
    .form-group input,
    .form-group select {
        width: 100%;
        padding: 0.85rem 1rem;
        border: 1px solid #e5e7eb;
        border-radius: 0.25rem;
        font-size: 0.95rem;
        background-color: #fafafa;
        color: #111827;
        transition: all 0.2s ease-in-out;
    }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #6366f1;
            box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.15);
            background-color: #ffffff;
        }

    /* Error text */
    .error-text {
        font-size: 0.8rem;
        color: #ef4444;
        margin-top: 0.25rem;
    }

    /* Actions */
    .actions {
        display: flex;
        justify-content: flex-end;
        gap: 1rem;
        margin-top: 2rem;
    }

    /* Buttons */
    .btn-primary {
        background: #111827;
        color: #fff;
        padding: 0.85rem 1.75rem;
        border-radius: 0.5rem;
        border: none;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.25s ease;
    }

        .btn-primary:hover {
            background: #1f2937;
            transform: translateY(-2px);
            box-shadow: 0 4px 14px rgba(99, 102, 241, 0.3);
        }

    .btn-secondary {
        background: #f9fafb;
        color: #374151;
        padding: 0.85rem 1.75rem;
        border-radius: 0.5rem;
        font-weight: 500;
        text-decoration: none;
        border: 1px solid #e5e7eb;
        transition: all 0.25s ease;
    }

        .btn-secondary:hover {
            background: #f3f4f6;
            color: #111827;
            transform: translateY(-2px);
        }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Chỉ hiển thị popup báo lỗi nếu có lỗi trong ModelState với key là "CustomError"
       @if (ViewData.ModelState.ContainsKey("CustomError"))
        {
            var errors = ViewData.ModelState["CustomError"].Errors;
            foreach (var error in errors)
            {
                <text>
                    Toastify({
                        text: @Html.Raw(Json.Encode(error.ErrorMessage)),
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "linear-gradient(to right, #ef4444, #dc2626)",
                        close: true
                    }).showToast();
                </text>
            }
        }
    });
</script>
